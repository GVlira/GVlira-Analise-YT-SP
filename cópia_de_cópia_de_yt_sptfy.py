# -*- coding: utf-8 -*-
"""Cópia de Cópia de YT_SPTFY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wt6oSPs2e3fAFWhYDauUoFnjbsLPocz_
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# !pip install spotipy google-api-python-client python-dotenv pandas sqlalchemy pymongo streamlit
# 
#

# Exemplo de credenciais direto no Colab
SPOTIFY_CLIENT_ID = "605860ee776744fea51ad434401209eb"
SPOTIFY_CLIENT_SECRET = "42f7e26a01074f8f9cef146040b50437"
YOUTUBE_API_KEY = "AIzaSyBcN8bP3tQ7lR30sYhJwzfd8N0q9OFivoI"

!pip install spotipy google-api-python-client python-dotenv

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import pandas as pd
import time

# Autenticação
client_id = '40ca21d223dc4ad2827fb1c3d43a8b7f'
client_secret = '14c6ddbfa8134dff8c50ff09551e13b6'
auth_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
sp = spotipy.Spotify(auth_manager=auth_manager)

# Função para obter faixas da playlist
def get_playlist_tracks(playlist_id):
    tracks = []
    results = sp.playlist_tracks(playlist_id)
    tracks.extend(results['items'])
    while results['next']:
        results = sp.next(results)
        tracks.extend(results['items'])
    return tracks

# Extração de dados
playlist_id = '1oi0M13L5oUFSwXeCdqiIh'  # Top 50 - Brazil
tracks = get_playlist_tracks(playlist_id)

# Transformação dos dados
def extract_track_data(tracks):
    data = []
    for item in tracks:
        track = item['track']
        artist = track['artists'][0]
        artist_data = sp.artist(artist['id'])
        data.append({
            'track_name': track['name'],
            'artist_name': artist['name'],
            'track_popularity': track['popularity'],
            'artist_genres': artist_data['genres'],
            'artist_followers': artist_data['followers']['total']
        })
        time.sleep(0.1)  # Controle de rate limit
    return pd.DataFrame(data)

df_spotify = extract_track_data(tracks)

from googleapiclient.discovery import build

# Autenticação
api_key = 'AIzaSyBcN8bP3tQ7lR30sYhJwzfd8N0q9OFivoI'
youtube = build('youtube', 'v3', developerKey=api_key)

# Função para obter vídeos da playlist
def get_playlist_videos(playlist_id):
    videos = []
    request = youtube.playlistItems().list(
        part='snippet',
        playlistId=playlist_id,
        maxResults=50
    )
    response = request.execute()
    videos.extend(response['items'])
    return videos

# Extração de dados
playlist_id = 'PLCwAHfhr-Gc_Ra3WPBZZDdzS1MNRgO1lq'
videos = get_playlist_videos(playlist_id)

# Transformação dos dados
def extract_video_data(videos):
    data = []
    for item in videos:
        snippet = item['snippet']
        data.append({
            'video_title': snippet['title'],
            'channel_title': snippet['channelTitle'],
            'publish_time': snippet['publishedAt']
        })
    return pd.DataFrame(data)

df_youtube = extract_video_data(videos)

!pip install rapidfuzz

from rapidfuzz import fuzz

def match_tracks_in_videos(tracks_df, videos_df, threshold=80):
    matches = []
    for _, track_row in tracks_df.iterrows():
        track_name = track_row['track_name']
        artist_name = track_row['artist_name']
        for _, video_row in videos_df.iterrows():
            video_title = video_row['video_title']
            score = fuzz.partial_ratio(track_name.lower(), video_title.lower())
            if score >= threshold:
                matches.append({
                    'track_name': track_name,
                    'artist_name': artist_name,
                    'video_title': video_title,
                    'channel_title': video_row['channel_title'],
                    'publish_time': video_row['publish_time'],
                    'score': score
                })
    return pd.DataFrame(matches)

df_correlacao = match_tracks_in_videos(df_spotify, df_youtube)

# Adicionando colunas de engajamento fictícias para exemplificação
df_spotify['engajamento'] = df_spotify['track_popularity'] + df_spotify['artist_followers'] / 1000
df_youtube['engajamento'] = pd.Series([1000] * len(df_youtube))  # Substitua por dados reais de visualizações, likes, etc.

# Comparação de engajamento
df_engajamento = pd.merge(df_correlacao, df_spotify, on=['track_name', 'artist_name'])
df_engajamento = pd.merge(df_engajamento, df_youtube, left_on='video_title', right_on='video_title')

!pip install streamlit pyngrok
from pyngrok import ngrok

# Executar o aplicativo
!streamlit run Cópia de Cópia de YT_SPTFY.ipynb.py &

# Criar um túnel para o aplicativo
public_url = ngrok.connect(port=8501)
print(f"Aplicativo disponível em: {public_url}")

# Salve este código em um arquivo chamado app.py

import streamlit as st
import pandas as pd

st.title("Análise de Músicas e Vídeos Populares no Brasil")

st.header("Top Músicas no Spotify")
st.dataframe(df_spotify)

st.header("Top Vídeos no YouTube")
st.dataframe(df_youtube)

st.header("Correlação entre Músicas e Vídeos")
st.dataframe(df_correlacao)

st.header("Análise de Engajamento")
st.dataframe(df_engajamento)